/*******************************************************************************
* JAW DEVELOPMENT LLC
* J3D
* github.com/jawdev/j3d
* j3d/math/vec.cpp
*******************************************************************************/
#include "../j3d.h"
namespace j3d {

/*******************************************************************************
* VEC2
*******************************************************************************/

vec2::operator vec3() { return vec3(x(), y(), 0); }
vec2::operator vec4() { return vec4(x(), y(), 0, 1); }

/*******************************************************************************
* VEC3
*******************************************************************************/

vec3::operator vec2() { return vec2(x(), y()); }
vec3::operator vec4() { return vec4(x(), y(), z(), 1); }

/*******************************************************************************
* VEC4
*******************************************************************************/

vec4 vec4::operator*(const mat4 &m) const
{
	vec4 v;
	v[0] =	m.data[0][0] * x() +
			m.data[1][0] * y() +
			m.data[2][0] * z() +
			m.data[3][0] * w();
	v[1] =	m.data[0][1] * x() +
			m.data[1][1] * y() +
			m.data[2][1] * z() +
			m.data[3][1] * w();
	v[2] =	m.data[0][2] * x() +
			m.data[1][2] * y() +
			m.data[2][2] * z() +
			m.data[3][2] * w();
	v[3] =	m.data[0][3] * x() +
			m.data[1][3] * y() +
			m.data[2][3] * z() +
			m.data[3][3] * w();
	return v;
}

vec4::operator vec2() { return vec2(x(), y()); }
vec4::operator vec3() { return vec3(x(), y(), z()); }

}
